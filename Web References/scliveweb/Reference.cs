//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
// 
#pragma warning disable 1591

namespace DraftAdmin.scliveweb {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://localhost/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallFunctionByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamsByLeagueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlayersByTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConferencesbyLeagueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamsByConferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIMSImageByTeamIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetX2OGamesByLeagueOrDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGamesByDateRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDotComHeadlinesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultiPlayerCardsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMLPlayerCardsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSeasonByLeagueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNewsTeamsByLeagueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlayersByTeamWithIMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMLBBoxScoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamsAndPlayersImagePathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAutoRaceStandingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTop25GamesInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = "http://scliveweb/dataserver/service.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event CallFunctionByNameCompletedEventHandler CallFunctionByNameCompleted;
        
        /// <remarks/>
        public event GetTeamsByLeagueCompletedEventHandler GetTeamsByLeagueCompleted;
        
        /// <remarks/>
        public event GetPlayersByTeamCompletedEventHandler GetPlayersByTeamCompleted;
        
        /// <remarks/>
        public event GetConferencesbyLeagueCompletedEventHandler GetConferencesbyLeagueCompleted;
        
        /// <remarks/>
        public event GetTeamsByConferenceCompletedEventHandler GetTeamsByConferenceCompleted;
        
        /// <remarks/>
        public event GetIMSImageByTeamIDCompletedEventHandler GetIMSImageByTeamIDCompleted;
        
        /// <remarks/>
        public event GetX2OGamesByLeagueOrDateCompletedEventHandler GetX2OGamesByLeagueOrDateCompleted;
        
        /// <remarks/>
        public event GetGamesByDateRangeCompletedEventHandler GetGamesByDateRangeCompleted;
        
        /// <remarks/>
        public event GetDotComHeadlinesCompletedEventHandler GetDotComHeadlinesCompleted;
        
        /// <remarks/>
        public event GetMultiPlayerCardsCompletedEventHandler GetMultiPlayerCardsCompleted;
        
        /// <remarks/>
        public event GetMLPlayerCardsCompletedEventHandler GetMLPlayerCardsCompleted;
        
        /// <remarks/>
        public event GetSeasonByLeagueCompletedEventHandler GetSeasonByLeagueCompleted;
        
        /// <remarks/>
        public event GetNewsTeamsByLeagueCompletedEventHandler GetNewsTeamsByLeagueCompleted;
        
        /// <remarks/>
        public event GetPlayersByTeamWithIMSCompletedEventHandler GetPlayersByTeamWithIMSCompleted;
        
        /// <remarks/>
        public event GetMLBBoxScoreCompletedEventHandler GetMLBBoxScoreCompleted;
        
        /// <remarks/>
        public event GetTeamsAndPlayersImagePathCompletedEventHandler GetTeamsAndPlayersImagePathCompleted;
        
        /// <remarks/>
        public event GetAutoRaceStandingsCompletedEventHandler GetAutoRaceStandingsCompleted;
        
        /// <remarks/>
        public event GetTop25GamesInfoCompletedEventHandler GetTop25GamesInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/HelloWorld", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/CallFunctionByName", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CallFunctionByName(string Name, object[] Params) {
            object[] results = this.Invoke("CallFunctionByName", new object[] {
                        Name,
                        Params});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CallFunctionByNameAsync(string Name, object[] Params) {
            this.CallFunctionByNameAsync(Name, Params, null);
        }
        
        /// <remarks/>
        public void CallFunctionByNameAsync(string Name, object[] Params, object userState) {
            if ((this.CallFunctionByNameOperationCompleted == null)) {
                this.CallFunctionByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallFunctionByNameOperationCompleted);
            }
            this.InvokeAsync("CallFunctionByName", new object[] {
                        Name,
                        Params}, this.CallFunctionByNameOperationCompleted, userState);
        }
        
        private void OnCallFunctionByNameOperationCompleted(object arg) {
            if ((this.CallFunctionByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallFunctionByNameCompleted(this, new CallFunctionByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetTeamsByLeague", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTeamsByLeague(string pstrLeague) {
            object[] results = this.Invoke("GetTeamsByLeague", new object[] {
                        pstrLeague});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamsByLeagueAsync(string pstrLeague) {
            this.GetTeamsByLeagueAsync(pstrLeague, null);
        }
        
        /// <remarks/>
        public void GetTeamsByLeagueAsync(string pstrLeague, object userState) {
            if ((this.GetTeamsByLeagueOperationCompleted == null)) {
                this.GetTeamsByLeagueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamsByLeagueOperationCompleted);
            }
            this.InvokeAsync("GetTeamsByLeague", new object[] {
                        pstrLeague}, this.GetTeamsByLeagueOperationCompleted, userState);
        }
        
        private void OnGetTeamsByLeagueOperationCompleted(object arg) {
            if ((this.GetTeamsByLeagueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamsByLeagueCompleted(this, new GetTeamsByLeagueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetPlayersByTeam", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPlayersByTeam(string plngTeamId) {
            object[] results = this.Invoke("GetPlayersByTeam", new object[] {
                        plngTeamId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPlayersByTeamAsync(string plngTeamId) {
            this.GetPlayersByTeamAsync(plngTeamId, null);
        }
        
        /// <remarks/>
        public void GetPlayersByTeamAsync(string plngTeamId, object userState) {
            if ((this.GetPlayersByTeamOperationCompleted == null)) {
                this.GetPlayersByTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlayersByTeamOperationCompleted);
            }
            this.InvokeAsync("GetPlayersByTeam", new object[] {
                        plngTeamId}, this.GetPlayersByTeamOperationCompleted, userState);
        }
        
        private void OnGetPlayersByTeamOperationCompleted(object arg) {
            if ((this.GetPlayersByTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlayersByTeamCompleted(this, new GetPlayersByTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetConferencesbyLeague", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetConferencesbyLeague(string pstrLeague) {
            object[] results = this.Invoke("GetConferencesbyLeague", new object[] {
                        pstrLeague});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetConferencesbyLeagueAsync(string pstrLeague) {
            this.GetConferencesbyLeagueAsync(pstrLeague, null);
        }
        
        /// <remarks/>
        public void GetConferencesbyLeagueAsync(string pstrLeague, object userState) {
            if ((this.GetConferencesbyLeagueOperationCompleted == null)) {
                this.GetConferencesbyLeagueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConferencesbyLeagueOperationCompleted);
            }
            this.InvokeAsync("GetConferencesbyLeague", new object[] {
                        pstrLeague}, this.GetConferencesbyLeagueOperationCompleted, userState);
        }
        
        private void OnGetConferencesbyLeagueOperationCompleted(object arg) {
            if ((this.GetConferencesbyLeagueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConferencesbyLeagueCompleted(this, new GetConferencesbyLeagueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetTeamsByConference", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTeamsByConference(long plngTeamId) {
            object[] results = this.Invoke("GetTeamsByConference", new object[] {
                        plngTeamId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamsByConferenceAsync(long plngTeamId) {
            this.GetTeamsByConferenceAsync(plngTeamId, null);
        }
        
        /// <remarks/>
        public void GetTeamsByConferenceAsync(long plngTeamId, object userState) {
            if ((this.GetTeamsByConferenceOperationCompleted == null)) {
                this.GetTeamsByConferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamsByConferenceOperationCompleted);
            }
            this.InvokeAsync("GetTeamsByConference", new object[] {
                        plngTeamId}, this.GetTeamsByConferenceOperationCompleted, userState);
        }
        
        private void OnGetTeamsByConferenceOperationCompleted(object arg) {
            if ((this.GetTeamsByConferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamsByConferenceCompleted(this, new GetTeamsByConferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetIMSImageByTeamID", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetIMSImageByTeamID(string pstrHiDef, long plngTeamID, long plngImageTypeId) {
            object[] results = this.Invoke("GetIMSImageByTeamID", new object[] {
                        pstrHiDef,
                        plngTeamID,
                        plngImageTypeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetIMSImageByTeamIDAsync(string pstrHiDef, long plngTeamID, long plngImageTypeId) {
            this.GetIMSImageByTeamIDAsync(pstrHiDef, plngTeamID, plngImageTypeId, null);
        }
        
        /// <remarks/>
        public void GetIMSImageByTeamIDAsync(string pstrHiDef, long plngTeamID, long plngImageTypeId, object userState) {
            if ((this.GetIMSImageByTeamIDOperationCompleted == null)) {
                this.GetIMSImageByTeamIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIMSImageByTeamIDOperationCompleted);
            }
            this.InvokeAsync("GetIMSImageByTeamID", new object[] {
                        pstrHiDef,
                        plngTeamID,
                        plngImageTypeId}, this.GetIMSImageByTeamIDOperationCompleted, userState);
        }
        
        private void OnGetIMSImageByTeamIDOperationCompleted(object arg) {
            if ((this.GetIMSImageByTeamIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIMSImageByTeamIDCompleted(this, new GetIMSImageByTeamIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetX2OGamesByLeagueOrDate", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetX2OGamesByLeagueOrDate(string pstrDate, string pstrMachinename, string pstrleague) {
            object[] results = this.Invoke("GetX2OGamesByLeagueOrDate", new object[] {
                        pstrDate,
                        pstrMachinename,
                        pstrleague});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetX2OGamesByLeagueOrDateAsync(string pstrDate, string pstrMachinename, string pstrleague) {
            this.GetX2OGamesByLeagueOrDateAsync(pstrDate, pstrMachinename, pstrleague, null);
        }
        
        /// <remarks/>
        public void GetX2OGamesByLeagueOrDateAsync(string pstrDate, string pstrMachinename, string pstrleague, object userState) {
            if ((this.GetX2OGamesByLeagueOrDateOperationCompleted == null)) {
                this.GetX2OGamesByLeagueOrDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetX2OGamesByLeagueOrDateOperationCompleted);
            }
            this.InvokeAsync("GetX2OGamesByLeagueOrDate", new object[] {
                        pstrDate,
                        pstrMachinename,
                        pstrleague}, this.GetX2OGamesByLeagueOrDateOperationCompleted, userState);
        }
        
        private void OnGetX2OGamesByLeagueOrDateOperationCompleted(object arg) {
            if ((this.GetX2OGamesByLeagueOrDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetX2OGamesByLeagueOrDateCompleted(this, new GetX2OGamesByLeagueOrDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetGamesByDateRange", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetGamesByDateRange(string pstrLeague, string pstrStartDate, string pstrEndDate) {
            object[] results = this.Invoke("GetGamesByDateRange", new object[] {
                        pstrLeague,
                        pstrStartDate,
                        pstrEndDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetGamesByDateRangeAsync(string pstrLeague, string pstrStartDate, string pstrEndDate) {
            this.GetGamesByDateRangeAsync(pstrLeague, pstrStartDate, pstrEndDate, null);
        }
        
        /// <remarks/>
        public void GetGamesByDateRangeAsync(string pstrLeague, string pstrStartDate, string pstrEndDate, object userState) {
            if ((this.GetGamesByDateRangeOperationCompleted == null)) {
                this.GetGamesByDateRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGamesByDateRangeOperationCompleted);
            }
            this.InvokeAsync("GetGamesByDateRange", new object[] {
                        pstrLeague,
                        pstrStartDate,
                        pstrEndDate}, this.GetGamesByDateRangeOperationCompleted, userState);
        }
        
        private void OnGetGamesByDateRangeOperationCompleted(object arg) {
            if ((this.GetGamesByDateRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGamesByDateRangeCompleted(this, new GetGamesByDateRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetDotComHeadlines", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDotComHeadlines() {
            object[] results = this.Invoke("GetDotComHeadlines", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDotComHeadlinesAsync() {
            this.GetDotComHeadlinesAsync(null);
        }
        
        /// <remarks/>
        public void GetDotComHeadlinesAsync(object userState) {
            if ((this.GetDotComHeadlinesOperationCompleted == null)) {
                this.GetDotComHeadlinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDotComHeadlinesOperationCompleted);
            }
            this.InvokeAsync("GetDotComHeadlines", new object[0], this.GetDotComHeadlinesOperationCompleted, userState);
        }
        
        private void OnGetDotComHeadlinesOperationCompleted(object arg) {
            if ((this.GetDotComHeadlinesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDotComHeadlinesCompleted(this, new GetDotComHeadlinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetMultiPlayerCards", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetMultiPlayerCards(string pstrPlayerIds, string pstrLeagueId, string pstrSeasonType) {
            object[] results = this.Invoke("GetMultiPlayerCards", new object[] {
                        pstrPlayerIds,
                        pstrLeagueId,
                        pstrSeasonType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetMultiPlayerCardsAsync(string pstrPlayerIds, string pstrLeagueId, string pstrSeasonType) {
            this.GetMultiPlayerCardsAsync(pstrPlayerIds, pstrLeagueId, pstrSeasonType, null);
        }
        
        /// <remarks/>
        public void GetMultiPlayerCardsAsync(string pstrPlayerIds, string pstrLeagueId, string pstrSeasonType, object userState) {
            if ((this.GetMultiPlayerCardsOperationCompleted == null)) {
                this.GetMultiPlayerCardsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultiPlayerCardsOperationCompleted);
            }
            this.InvokeAsync("GetMultiPlayerCards", new object[] {
                        pstrPlayerIds,
                        pstrLeagueId,
                        pstrSeasonType}, this.GetMultiPlayerCardsOperationCompleted, userState);
        }
        
        private void OnGetMultiPlayerCardsOperationCompleted(object arg) {
            if ((this.GetMultiPlayerCardsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultiPlayerCardsCompleted(this, new GetMultiPlayerCardsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetMLPlayerCards", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetMLPlayerCards(string pstrPlayerIds, string pstrSeasonId) {
            object[] results = this.Invoke("GetMLPlayerCards", new object[] {
                        pstrPlayerIds,
                        pstrSeasonId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetMLPlayerCardsAsync(string pstrPlayerIds, string pstrSeasonId) {
            this.GetMLPlayerCardsAsync(pstrPlayerIds, pstrSeasonId, null);
        }
        
        /// <remarks/>
        public void GetMLPlayerCardsAsync(string pstrPlayerIds, string pstrSeasonId, object userState) {
            if ((this.GetMLPlayerCardsOperationCompleted == null)) {
                this.GetMLPlayerCardsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMLPlayerCardsOperationCompleted);
            }
            this.InvokeAsync("GetMLPlayerCards", new object[] {
                        pstrPlayerIds,
                        pstrSeasonId}, this.GetMLPlayerCardsOperationCompleted, userState);
        }
        
        private void OnGetMLPlayerCardsOperationCompleted(object arg) {
            if ((this.GetMLPlayerCardsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMLPlayerCardsCompleted(this, new GetMLPlayerCardsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetSeasonByLeague", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSeasonByLeague(string pstrLeagueId) {
            object[] results = this.Invoke("GetSeasonByLeague", new object[] {
                        pstrLeagueId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSeasonByLeagueAsync(string pstrLeagueId) {
            this.GetSeasonByLeagueAsync(pstrLeagueId, null);
        }
        
        /// <remarks/>
        public void GetSeasonByLeagueAsync(string pstrLeagueId, object userState) {
            if ((this.GetSeasonByLeagueOperationCompleted == null)) {
                this.GetSeasonByLeagueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSeasonByLeagueOperationCompleted);
            }
            this.InvokeAsync("GetSeasonByLeague", new object[] {
                        pstrLeagueId}, this.GetSeasonByLeagueOperationCompleted, userState);
        }
        
        private void OnGetSeasonByLeagueOperationCompleted(object arg) {
            if ((this.GetSeasonByLeagueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSeasonByLeagueCompleted(this, new GetSeasonByLeagueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetNewsTeamsByLeague", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetNewsTeamsByLeague(string pstrLeague) {
            object[] results = this.Invoke("GetNewsTeamsByLeague", new object[] {
                        pstrLeague});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewsTeamsByLeagueAsync(string pstrLeague) {
            this.GetNewsTeamsByLeagueAsync(pstrLeague, null);
        }
        
        /// <remarks/>
        public void GetNewsTeamsByLeagueAsync(string pstrLeague, object userState) {
            if ((this.GetNewsTeamsByLeagueOperationCompleted == null)) {
                this.GetNewsTeamsByLeagueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewsTeamsByLeagueOperationCompleted);
            }
            this.InvokeAsync("GetNewsTeamsByLeague", new object[] {
                        pstrLeague}, this.GetNewsTeamsByLeagueOperationCompleted, userState);
        }
        
        private void OnGetNewsTeamsByLeagueOperationCompleted(object arg) {
            if ((this.GetNewsTeamsByLeagueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewsTeamsByLeagueCompleted(this, new GetNewsTeamsByLeagueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetPlayersByTeamWithIMS", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPlayersByTeamWithIMS(long plngPlayerId, string pstrSwatch) {
            object[] results = this.Invoke("GetPlayersByTeamWithIMS", new object[] {
                        plngPlayerId,
                        pstrSwatch});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPlayersByTeamWithIMSAsync(long plngPlayerId, string pstrSwatch) {
            this.GetPlayersByTeamWithIMSAsync(plngPlayerId, pstrSwatch, null);
        }
        
        /// <remarks/>
        public void GetPlayersByTeamWithIMSAsync(long plngPlayerId, string pstrSwatch, object userState) {
            if ((this.GetPlayersByTeamWithIMSOperationCompleted == null)) {
                this.GetPlayersByTeamWithIMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlayersByTeamWithIMSOperationCompleted);
            }
            this.InvokeAsync("GetPlayersByTeamWithIMS", new object[] {
                        plngPlayerId,
                        pstrSwatch}, this.GetPlayersByTeamWithIMSOperationCompleted, userState);
        }
        
        private void OnGetPlayersByTeamWithIMSOperationCompleted(object arg) {
            if ((this.GetPlayersByTeamWithIMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlayersByTeamWithIMSCompleted(this, new GetPlayersByTeamWithIMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetMLBBoxScore", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetMLBBoxScore(string pstrGameNum, string pstrCallType, bool pblnLineUp) {
            object[] results = this.Invoke("GetMLBBoxScore", new object[] {
                        pstrGameNum,
                        pstrCallType,
                        pblnLineUp});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetMLBBoxScoreAsync(string pstrGameNum, string pstrCallType, bool pblnLineUp) {
            this.GetMLBBoxScoreAsync(pstrGameNum, pstrCallType, pblnLineUp, null);
        }
        
        /// <remarks/>
        public void GetMLBBoxScoreAsync(string pstrGameNum, string pstrCallType, bool pblnLineUp, object userState) {
            if ((this.GetMLBBoxScoreOperationCompleted == null)) {
                this.GetMLBBoxScoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMLBBoxScoreOperationCompleted);
            }
            this.InvokeAsync("GetMLBBoxScore", new object[] {
                        pstrGameNum,
                        pstrCallType,
                        pblnLineUp}, this.GetMLBBoxScoreOperationCompleted, userState);
        }
        
        private void OnGetMLBBoxScoreOperationCompleted(object arg) {
            if ((this.GetMLBBoxScoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMLBBoxScoreCompleted(this, new GetMLBBoxScoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetTeamsAndPlayersImagePath", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTeamsAndPlayersImagePath(string pstrIDs, long plngImageTypeId, string pstrHiDef, string pstrSwatch) {
            object[] results = this.Invoke("GetTeamsAndPlayersImagePath", new object[] {
                        pstrIDs,
                        plngImageTypeId,
                        pstrHiDef,
                        pstrSwatch});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamsAndPlayersImagePathAsync(string pstrIDs, long plngImageTypeId, string pstrHiDef, string pstrSwatch) {
            this.GetTeamsAndPlayersImagePathAsync(pstrIDs, plngImageTypeId, pstrHiDef, pstrSwatch, null);
        }
        
        /// <remarks/>
        public void GetTeamsAndPlayersImagePathAsync(string pstrIDs, long plngImageTypeId, string pstrHiDef, string pstrSwatch, object userState) {
            if ((this.GetTeamsAndPlayersImagePathOperationCompleted == null)) {
                this.GetTeamsAndPlayersImagePathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamsAndPlayersImagePathOperationCompleted);
            }
            this.InvokeAsync("GetTeamsAndPlayersImagePath", new object[] {
                        pstrIDs,
                        plngImageTypeId,
                        pstrHiDef,
                        pstrSwatch}, this.GetTeamsAndPlayersImagePathOperationCompleted, userState);
        }
        
        private void OnGetTeamsAndPlayersImagePathOperationCompleted(object arg) {
            if ((this.GetTeamsAndPlayersImagePathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamsAndPlayersImagePathCompleted(this, new GetTeamsAndPlayersImagePathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetAutoRaceStandings", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAutoRaceStandings(int pintCircuitSeriesId, string pstrStandingsType, string pstrScoringSystem) {
            object[] results = this.Invoke("GetAutoRaceStandings", new object[] {
                        pintCircuitSeriesId,
                        pstrStandingsType,
                        pstrScoringSystem});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAutoRaceStandingsAsync(int pintCircuitSeriesId, string pstrStandingsType, string pstrScoringSystem) {
            this.GetAutoRaceStandingsAsync(pintCircuitSeriesId, pstrStandingsType, pstrScoringSystem, null);
        }
        
        /// <remarks/>
        public void GetAutoRaceStandingsAsync(int pintCircuitSeriesId, string pstrStandingsType, string pstrScoringSystem, object userState) {
            if ((this.GetAutoRaceStandingsOperationCompleted == null)) {
                this.GetAutoRaceStandingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAutoRaceStandingsOperationCompleted);
            }
            this.InvokeAsync("GetAutoRaceStandings", new object[] {
                        pintCircuitSeriesId,
                        pstrStandingsType,
                        pstrScoringSystem}, this.GetAutoRaceStandingsOperationCompleted, userState);
        }
        
        private void OnGetAutoRaceStandingsOperationCompleted(object arg) {
            if ((this.GetAutoRaceStandingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAutoRaceStandingsCompleted(this, new GetAutoRaceStandingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GetTop25GamesInfo", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTop25GamesInfo(string pstrLeague) {
            object[] results = this.Invoke("GetTop25GamesInfo", new object[] {
                        pstrLeague});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTop25GamesInfoAsync(string pstrLeague) {
            this.GetTop25GamesInfoAsync(pstrLeague, null);
        }
        
        /// <remarks/>
        public void GetTop25GamesInfoAsync(string pstrLeague, object userState) {
            if ((this.GetTop25GamesInfoOperationCompleted == null)) {
                this.GetTop25GamesInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTop25GamesInfoOperationCompleted);
            }
            this.InvokeAsync("GetTop25GamesInfo", new object[] {
                        pstrLeague}, this.GetTop25GamesInfoOperationCompleted, userState);
        }
        
        private void OnGetTop25GamesInfoOperationCompleted(object arg) {
            if ((this.GetTop25GamesInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTop25GamesInfoCompleted(this, new GetTop25GamesInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CallFunctionByNameCompletedEventHandler(object sender, CallFunctionByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallFunctionByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallFunctionByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTeamsByLeagueCompletedEventHandler(object sender, GetTeamsByLeagueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamsByLeagueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamsByLeagueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPlayersByTeamCompletedEventHandler(object sender, GetPlayersByTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlayersByTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlayersByTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetConferencesbyLeagueCompletedEventHandler(object sender, GetConferencesbyLeagueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConferencesbyLeagueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConferencesbyLeagueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTeamsByConferenceCompletedEventHandler(object sender, GetTeamsByConferenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamsByConferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamsByConferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIMSImageByTeamIDCompletedEventHandler(object sender, GetIMSImageByTeamIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIMSImageByTeamIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIMSImageByTeamIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetX2OGamesByLeagueOrDateCompletedEventHandler(object sender, GetX2OGamesByLeagueOrDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetX2OGamesByLeagueOrDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetX2OGamesByLeagueOrDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetGamesByDateRangeCompletedEventHandler(object sender, GetGamesByDateRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGamesByDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGamesByDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDotComHeadlinesCompletedEventHandler(object sender, GetDotComHeadlinesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDotComHeadlinesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDotComHeadlinesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMultiPlayerCardsCompletedEventHandler(object sender, GetMultiPlayerCardsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultiPlayerCardsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultiPlayerCardsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMLPlayerCardsCompletedEventHandler(object sender, GetMLPlayerCardsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMLPlayerCardsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMLPlayerCardsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSeasonByLeagueCompletedEventHandler(object sender, GetSeasonByLeagueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSeasonByLeagueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSeasonByLeagueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetNewsTeamsByLeagueCompletedEventHandler(object sender, GetNewsTeamsByLeagueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewsTeamsByLeagueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewsTeamsByLeagueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPlayersByTeamWithIMSCompletedEventHandler(object sender, GetPlayersByTeamWithIMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlayersByTeamWithIMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlayersByTeamWithIMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMLBBoxScoreCompletedEventHandler(object sender, GetMLBBoxScoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMLBBoxScoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMLBBoxScoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTeamsAndPlayersImagePathCompletedEventHandler(object sender, GetTeamsAndPlayersImagePathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamsAndPlayersImagePathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamsAndPlayersImagePathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAutoRaceStandingsCompletedEventHandler(object sender, GetAutoRaceStandingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAutoRaceStandingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAutoRaceStandingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTop25GamesInfoCompletedEventHandler(object sender, GetTop25GamesInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTop25GamesInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTop25GamesInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591